'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _RedditContent = require('./RedditContent');

var _RedditContent2 = _interopRequireDefault(_RedditContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A class representing an author from a modmail conversation
 * <style> #ModmailConversationAuthor {display: none} </style>
 * @example
 *
 * // Get a Modmail Conversation author with a given ID
 * r.getNewModmailConversation('75hxt').getParticipant()
 * @extends RedditContent
 */
var ModmailConversationAuthor = class ModmailParticipant extends _RedditContent2.default {

  constructor(options, r, hasFetched) {
    var _this;

    _this = super(options, r, hasFetched);

    options.recentComments = Object.keys(options.recentComments).map(function (commentId) {
      return _this._r._newObject('Comment', _extends({
        name: commentId
      }, options.recentComments[commentId]));
    });

    options.recentPosts = Object.keys(options.recentPosts).map(function (postId) {
      return _this._r._newObject('Submission', _extends({
        name: postId
      }, options.recentPosts[postId]));
    });
  }

  /**
   * @summary Gets information on a Reddit user for the given modmail.
   * @returns {RedditUser} An unfetched RedditUser object for the requested user
   * @example
   *
   * r.getNewModmailConversation('efy3lax').getParticipant().getUser()
   * // => RedditUser { name: 'not_an_aardvark' }
   * r.getNewModmailConversation('efy3lax').getParticipant().getUser().link_karma.then(console.log)
   * // => 6
   */
  getUser() {
    return this._r.getUser(this.name);
  }

};

exports.default = ModmailConversationAuthor;